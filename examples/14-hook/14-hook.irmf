/*{
  irmf: "1.0",
  materials: ["PLA"],
  max: [50.5,95.5,10.5],
  min: [-50.5,-95.5,-10.5],
  units: "mm",
}*/

float circle(in float radius, in vec3 xyz) {
	float r = length(xyz.xy);
	return r <= radius ? 1.0 : 0.0;
}

float cylinder(in float h, in float r1, in float r2, in bool center, in vec3 xyz) {
	xyz.z /= h;
	float z = xyz.z;
	if (center) { z += 0.5; } else { xyz.z -= 0.5; }
	if (abs(xyz.z) > 0.5) { return 0.0; }
	float r = length(xyz.xy);
	float radius = mix(r1, r2, z);
	return r <= radius ? 1.0 : 0.0;
}

mat3 rotAxis(vec3 axis, float a) {
  // This is from: http://www.neilmendoza.com/glsl-rotation-about-an-arbitrary-axis/
  float s = sin(a);
  float c = cos(a);
  float oc = 1.0 - c;
  vec3 as = axis * s;
  mat3 p = mat3(axis.x * axis, axis.y * axis, axis.z * axis);
  mat3 q = mat3(c, - as.z, as.y, as.z, c, - as.x, - as.y, as.x, c);
  return p * oc + q;
}

mat4 rotZ(float angle) {
  return mat4(rotAxis(vec3(0, 0, 1), angle));
}

float multimatrixBlock0(in vec3 xyz) {
	mat4 xfm = mat4(vec4(1, 0, 0, -40), vec4(0, 1, 0, 0), vec4(0, 0, 1, 0), vec4(0, 0, 0, 1));
	xyz = (vec4(xyz, 1.0) * xfm).xyz;
	return circle(float(10), xyz);
}

float rotateExtrudeBlock1(in vec3 xyz) {
	float angle = atan(xyz.y, xyz.x);
	if (angle<0.) { angle+=(2.*3.1415926535897932384626433832795); }
	if (angle>float(270)*3.1415926535897932384626433832795/180.0) { return 0.0; }
	vec3 slice=(vec4(xyz,1)*rotZ(-angle)).xyz;
	xyz = slice.xzy;
	return multimatrixBlock0(xyz);
}

float multimatrixBlock2(in vec3 xyz) {
	mat4 xfm = mat4(vec4(1, 0, 0, 0), vec4(0, 1, 0, -60), vec4(0, 0, 1, 0), vec4(0, 0, 0, 1));
	xyz = (vec4(xyz, 1.0) * xfm).xyz;
	return rotateExtrudeBlock1(xyz);
}

float multimatrixBlock3(in vec3 xyz) {
	mat4 xfm = mat4(vec4(1, 0, 0, -20), vec4(0, 1, 0, 0), vec4(0, 0, 1, 0), vec4(0, 0, 0, 1));
	xyz = (vec4(xyz, 1.0) * xfm).xyz;
	return circle(float(10), xyz);
}

float rotateExtrudeBlock4(in vec3 xyz) {
	float angle = atan(xyz.y, xyz.x);
	if (angle<0.) { angle+=(2.*3.1415926535897932384626433832795); }
	if (angle>float(90)*3.1415926535897932384626433832795/180.0) { return 0.0; }
	vec3 slice=(vec4(xyz,1)*rotZ(-angle)).xyz;
	xyz = slice.xzy;
	return multimatrixBlock3(xyz);
}

float multimatrixBlock5(in vec3 xyz) {
	mat4 xfm = mat4(vec4(1, 0, 0, 0), vec4(0, 0, 1, 0), vec4(0, -1, 0, 0), vec4(0, 0, 0, 1));
	xyz = (vec4(xyz, 1.0) * xfm).xyz;
	return cylinder(float(80), float(10), float(10), false, xyz);
}

float multimatrixBlock6(in vec3 xyz) {
	mat4 xfm = mat4(vec4(1, 0, 0, -20), vec4(0, 1, 0, 0), vec4(0, 0, 1, 0), vec4(0, 0, 0, 1));
	xyz = (vec4(xyz, 1.0) * xfm).xyz;
	return multimatrixBlock5(xyz);
}

void mainModel4(out vec4 materials, in vec3 xyz) {
	xyz += vec3(0, 15, 0);
	materials[0] = multimatrixBlock2(xyz) + rotateExtrudeBlock4(xyz) + multimatrixBlock6(xyz);
}

