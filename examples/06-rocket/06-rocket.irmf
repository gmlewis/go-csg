/*{
  irmf: "1.0",
  materials: ["PLA"],
  max: [41,47,70.5],
  min: [-41,-47,-70.5],
  units: "mm",
}*/

float cylinder(in float h, in float r1, in float r2, in bool center, in vec3 xyz) {
	xyz.z /= h;
	float z = xyz.z;
	if (center) { z += 0.5; } else { xyz.z -= 0.5; }
	if (abs(xyz.z) > 0.5) { return 0.0; }
	float r = length(xyz.xy);
	float radius = mix(r1, r2, z);
	return r <= radius ? 1.0 : 0.0;
}

mat3 rotAxis(vec3 axis, float a) {
  // This is from: http://www.neilmendoza.com/glsl-rotation-about-an-arbitrary-axis/
  float s = sin(a);
  float c = cos(a);
  float oc = 1.0 - c;
  vec3 as = axis * s;
  mat3 p = mat3(axis.x * axis, axis.y * axis, axis.z * axis);
  mat3 q = mat3(c, - as.z, as.y, as.z, c, - as.x, - as.y, as.x, c);
  return p * oc + q;
}

mat4 rotZ(float angle) {
  return mat4(rotAxis(vec3(0, 0, 1), angle));
}

float testTwoLineSegments(in vec2 ll, in vec2 ul, in vec2 lr, in vec2 ur, in vec2 xy) {
	float lx = mix(ll.x,ul.x,(xy.y-ll.y)/(ul.y-ll.y));
	float rx = mix(lr.x,ur.x,(xy.y-lr.y)/(ur.y-lr.y));
	if (xy.x<lx || xy.x>rx) { return 0.0; }
	return 1.0;
}

float simplePolygon0(in vec3 xyz) {
	if (any(lessThan(xyz.xy, vec2(0,0))) || any(greaterThan(xyz.xy, vec2(20,40)))) { return 0.0; }
	if (xyz.y >= float(0) && xyz.y <= float(40)) { return testTwoLineSegments(vec2(0,0),vec2(0,40),vec2(20,0),vec2(0,40),xyz.xy); }
	return 1.0;
}

float rotateExtrudeBlock1(in vec3 xyz) {
	float angle = atan(xyz.y, xyz.x);
	if (angle<0.) { angle+=(2.*3.1415926535897932384626433832795); }
	if (angle>float(360)*3.1415926535897932384626433832795/180.0) { return 0.0; }
	vec3 slice=(vec4(xyz,1)*rotZ(-angle)).xyz;
	xyz = slice.xzy;
	return simplePolygon0(xyz);
}

float multimatrixBlock2(in vec3 xyz) {
	mat4 xfm = mat4(vec4(1, 0, 0, 0), vec4(0, 1, 0, 0), vec4(0, 0, 1, -100), vec4(0, 0, 0, 1));
	xyz = (vec4(xyz, 1.0) * xfm).xyz;
	return rotateExtrudeBlock1(xyz);
}

float simplePolygon3(in vec3 xyz) {
	if (any(lessThan(xyz.xy, vec2(0,0))) || any(greaterThan(xyz.xy, vec2(40,40)))) { return 0.0; }
	if (xyz.y >= float(0) && xyz.y <= float(40)) { return testTwoLineSegments(vec2(0,0),vec2(0,40),vec2(40,0),vec2(0,40),xyz.xy); }
	return 1.0;
}

float linearExtrudeBlock4(in vec3 xyz) {
	xyz.z /= float(2);
	float z = xyz.z;
	if (true) { z += 0.5; } else { xyz.z -= 0.5; }
	if (abs(xyz.z) > 0.5) { return 0.0; }
	vec2 s = mix(vec2(1),vec2(1,1),z);
	xyz.xy /= s;
	return simplePolygon3(xyz);
}

float multimatrixBlock5(in vec3 xyz) {
	mat4 xfm = mat4(vec4(1, 0, 0, 0), vec4(0, 2.22045e-16, 1, 0), vec4(0, -1, 2.22045e-16, 0), vec4(0, 0, 0, 1));
	xyz = (vec4(xyz, 1.0) * xfm).xyz;
	return linearExtrudeBlock4(xyz);
}

float multimatrixBlock6(in vec3 xyz) {
	mat4 xfm = mat4(vec4(1, 0, 0, -14), vec4(0, 1, 0, 0), vec4(0, 0, 1, 0), vec4(0, 0, 0, 1));
	xyz = (vec4(xyz, 1.0) * xfm).xyz;
	return multimatrixBlock5(xyz);
}

float groupBlock7(in vec3 xyz) {
	return multimatrixBlock6(xyz);
}

float multimatrixBlock8(in vec3 xyz) {
	mat4 xfm = mat4(vec4(1, 0, 0, 0), vec4(0, 1, 0, 0), vec4(0, 0, 1, 0), vec4(0, 0, 0, 1));
	xyz = (vec4(xyz, 1.0) * xfm).xyz;
	return groupBlock7(xyz);
}

float simplePolygon9(in vec3 xyz) {
	if (any(lessThan(xyz.xy, vec2(0,0))) || any(greaterThan(xyz.xy, vec2(40,40)))) { return 0.0; }
	if (xyz.y >= float(0) && xyz.y <= float(40)) { return testTwoLineSegments(vec2(0,0),vec2(0,40),vec2(40,0),vec2(0,40),xyz.xy); }
	return 1.0;
}

float linearExtrudeBlock10(in vec3 xyz) {
	xyz.z /= float(2);
	float z = xyz.z;
	if (true) { z += 0.5; } else { xyz.z -= 0.5; }
	if (abs(xyz.z) > 0.5) { return 0.0; }
	vec2 s = mix(vec2(1),vec2(1,1),z);
	xyz.xy /= s;
	return simplePolygon9(xyz);
}

float multimatrixBlock11(in vec3 xyz) {
	mat4 xfm = mat4(vec4(1, 0, 0, 0), vec4(0, 2.22045e-16, 1, 0), vec4(0, -1, 2.22045e-16, 0), vec4(0, 0, 0, 1));
	xyz = (vec4(xyz, 1.0) * xfm).xyz;
	return linearExtrudeBlock10(xyz);
}

float multimatrixBlock12(in vec3 xyz) {
	mat4 xfm = mat4(vec4(1, 0, 0, -14), vec4(0, 1, 0, 0), vec4(0, 0, 1, 0), vec4(0, 0, 0, 1));
	xyz = (vec4(xyz, 1.0) * xfm).xyz;
	return multimatrixBlock11(xyz);
}

float groupBlock13(in vec3 xyz) {
	return multimatrixBlock12(xyz);
}

float multimatrixBlock14(in vec3 xyz) {
	mat4 xfm = mat4(vec4(-0.5000003496877445, 0.866025605676658, 0, 0), vec4(-0.866025605676658, -0.5000003496877445, 0, 0), vec4(0, 0, 1, 0), vec4(0, 0, 0, 1));
	xyz = (vec4(xyz, 1.0) * xfm).xyz;
	return groupBlock13(xyz);
}

float simplePolygon15(in vec3 xyz) {
	if (any(lessThan(xyz.xy, vec2(0,0))) || any(greaterThan(xyz.xy, vec2(40,40)))) { return 0.0; }
	if (xyz.y >= float(0) && xyz.y <= float(40)) { return testTwoLineSegments(vec2(0,0),vec2(0,40),vec2(40,0),vec2(0,40),xyz.xy); }
	return 1.0;
}

float linearExtrudeBlock16(in vec3 xyz) {
	xyz.z /= float(2);
	float z = xyz.z;
	if (true) { z += 0.5; } else { xyz.z -= 0.5; }
	if (abs(xyz.z) > 0.5) { return 0.0; }
	vec2 s = mix(vec2(1),vec2(1,1),z);
	xyz.xy /= s;
	return simplePolygon15(xyz);
}

float multimatrixBlock17(in vec3 xyz) {
	mat4 xfm = mat4(vec4(1, 0, 0, 0), vec4(0, 2.22045e-16, 1, 0), vec4(0, -1, 2.22045e-16, 0), vec4(0, 0, 0, 1));
	xyz = (vec4(xyz, 1.0) * xfm).xyz;
	return linearExtrudeBlock16(xyz);
}

float multimatrixBlock18(in vec3 xyz) {
	mat4 xfm = mat4(vec4(1, 0, 0, -14), vec4(0, 1, 0, 0), vec4(0, 0, 1, 0), vec4(0, 0, 0, 1));
	xyz = (vec4(xyz, 1.0) * xfm).xyz;
	return multimatrixBlock17(xyz);
}

float groupBlock19(in vec3 xyz) {
	return multimatrixBlock18(xyz);
}

float multimatrixBlock20(in vec3 xyz) {
	mat4 xfm = mat4(vec4(-0.5000003496877445, -0.866025605676658, 0, 0), vec4(0.866025605676658, -0.5000003496877445, 0, 0), vec4(0, 0, 1, 0), vec4(0, 0, 0, 1));
	xyz = (vec4(xyz, 1.0) * xfm).xyz;
	return groupBlock19(xyz);
}

float groupBlock21(in vec3 xyz) {
	return multimatrixBlock8(xyz) + multimatrixBlock14(xyz) + multimatrixBlock20(xyz);
}

float groupBlock22(in vec3 xyz) {
	return cylinder(float(100), float(15), float(15), false, xyz) + multimatrixBlock2(xyz) + groupBlock21(xyz);
}

void mainModel4(out vec4 materials, in vec3 xyz) {
	xyz += vec3(13.0669875, -0.5, 70);
	materials[0] = groupBlock22(xyz);
}

